<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simon&#39;s Portfolio</title>
    <link>https://hugo-profile.netlify.app/</link>
    <description>Recent content on Simon&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Apr 2021 22:53:58 +0530</lastBuildDate><atom:link href="https://hugo-profile.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Image Gallery</title>
      <link>https://hugo-profile.netlify.app/gallery/</link>
      <pubDate>Sat, 25 Jun 2022 18:35:46 +0530</pubDate>
      
      <guid>https://hugo-profile.netlify.app/gallery/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://hugo-profile.netlify.app/projects/emoji-support/</link>
      <pubDate>Sat, 03 Apr 2021 22:53:58 +0530</pubDate>
      
      <guid>https://hugo-profile.netlify.app/projects/emoji-support/</guid>
      <description>Emoji can be enabled in a Hugo project in a number of ways. :zap:
Emoji Support The emojify function can be called directly in templates or Inline Shortcodes.
To enable emoji globally, set enableEmoji to true in your siteâ€™s configuration and then you can type emoji shorthand codes directly in content files; e.g.
The Emoji cheat sheet is a useful reference for emoji shorthand codes.
N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform.</description>
    </item>
    
    <item>
      <title>Emoji Support 2</title>
      <link>https://hugo-profile.netlify.app/projects/test-post/</link>
      <pubDate>Sat, 03 Apr 2021 22:53:58 +0530</pubDate>
      
      <guid>https://hugo-profile.netlify.app/projects/test-post/</guid>
      <description>This is some content
The Lighthouse of Amrum
Event Page
judge scoring.png
judge scoring.png
live page.png
live page.png
timetable page.png
timetable page.png</description>
    </item>
    
    <item>
      <title>Accessing Amplify GraphQL API objects from Lambda functions</title>
      <link>https://hugo-profile.netlify.app/blogs/amplify-lambda-dynamodb/</link>
      <pubDate>Fri, 20 Mar 2020 09:07:48 +0700</pubDate>
      
      <guid>https://hugo-profile.netlify.app/blogs/amplify-lambda-dynamodb/</guid>
      <description>Amplify offers the ability to add Lambda functions which use other configured resources including AppSync API DynamoDB Tables. This article focuses on creating a Lambda function with Amplify CLI that has access to these tables.</description>
    </item>
    
    <item>
      <title>Wakeboard Competition App Project</title>
      <link>https://hugo-profile.netlify.app/blogs/wakeboard-competition-app/</link>
      <pubDate>Thu, 19 Mar 2020 09:07:48 +0700</pubDate>
      
      <guid>https://hugo-profile.netlify.app/blogs/wakeboard-competition-app/</guid>
      <description>A short write up the Wakeboard Competition Management App; motivation, requirements, tools and design.</description>
    </item>
    
    <item>
      <title>Welcome to my blog</title>
      <link>https://hugo-profile.netlify.app/blogs/wellcome-to-my-blog/</link>
      <pubDate>Sun, 15 Mar 2020 09:07:48 +0700</pubDate>
      
      <guid>https://hugo-profile.netlify.app/blogs/wellcome-to-my-blog/</guid>
      <description>Introduction In this blog I aspire to detail my journey in adopting AWS Serverless Architecture;
Amplify Lambda Cognito AppSync DynamoDB API Gateway I am creating a Competition Management App for event organizers and competitors at Singapore Wakepark. This is a full stack serverless web application (ReactJS front-end, GraphQL API (AppSync + Node JS Lambda) back-end. I chose these technologies for the job because I believe them to be a good fit to my needs;</description>
    </item>
    
  </channel>
</rss>
